name: Sonar

on:
  workflow_run:
    workflows: [Build]
    types: [completed]

env:
  BUILD_TYPE: RelWithDebInfo

jobs:
  sonarscanner:
    runs-on: ubuntu-22.04
    if: github.event.workflow_run.conclusion == 'success'
    steps:
    - name: 'Install sonar'
      run: |
        cd /opt
        sudo wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
        sudo unzip sonar-scanner-cli-4.8.0.2856-linux.zip
        sudo ln -s /opt/sonar-scanner-4.8.0.2856-linux/bin/sonar-scanner /usr/bin

    - name: 'Install dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install -y libeigen3-dev \
                                libepoxy-dev \
                                libavcodec-dev \
                                libavformat-dev \
                                libavutil-dev \
                                libswscale-dev \
                                libjpeg-dev \
                                libpng-dev \
                                libglu1-mesa-dev \
                                qtbase5-dev \
                                qtbase5-dev-tools \
                                libqt5opengl5-dev \
                                libfreetype6-dev \
                                libsdl2-dev \
                                libluajit-5.1-dev \
                                libicu-dev \
                                ninja-build \
                                cmake

    - name: 'Checkout source code'
      uses: actions/checkout@v3
      with:
        submodules: true
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: 'Download autogenerated headers'
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.payload.workflow_run.id
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "celestia-autogenerated-headers"
          })[0];
          let download = await github.rest.actions.downloadArtifact({
            owner: context.repo.owner,
            repo: context.repo.repo,
            artifact_id: matchArtifact.id,
            archive_format: 'zip'
          });
          let fs = require('fs')
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/celestia-autogenerated-sources.zip`, Buffer.from(download.data));

    # GitHub wraps the generated archive in a zip, so we must unzip twice
    - name: 'Unzip autogenerated headers'
      run: |
        unzip -o celestia-autogenerated-headers.zip
        unzip celestia-autogenerated-headers.zip

    - name: 'Configure CMake'
      run: |
        cmake -B ${{github.workspace}}/build \
              -G Ninja                       \
              -DENABLE_GLES=ON               \
              -DENABLE_SPICE=OFF             \
              -DENABLE_TOOLS=OFF             \
              -DENABLE_TESTS=OFF             \
              -DENABLE_SDL=ON                \
              -DENABLE_GTK=OFF               \
              -DENABLE_QT5=ON                \
              -DENABLE_FFMPEG=ON             \
              -DENABLE_MINIAUDIO=ON          \
              -DUSE_ICU=ON                   \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Analyze
      run: |
        sonar-scanner                                                   \
          -Dsonar.host.url=https://sonarcloud.io                        \
          -Dsonar.cfamily.compile-commands=build/compile_commands.json  \
          -Dsonar.organization=celestiaproject                          \
          -Dsonar.projectKey=CelestiaProject_Celestia                   \
          -Dsonar.sources=src/                                          \
          -Dsonar.exclusions=src/celestia/win32/**,src/celestia/gtk/**,src/celutil/r128.h,src/**/*.inc,src/**/*_autogen/** \
          -Dsonar.test.exclusions=test/**                               \
          -Dsonar.tests=test/
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
