name: Celestia

on:
  push:
    branches: [ master ]
    paths: [ src/**, test/**, .github/workflows/ci.yml, CMakeLists.txt ]
  pull_request:
    branches: [ master ]
    paths: [ src/**, test/**, .github/workflows/ci.yml, CMakeLists.txt ]

env:
  BUILD_TYPE: RelWithDebInfo
  CTEST_OUTPUT_ON_FAILURE: 1
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

jobs:
  build-windows:
    name: "windows-${{matrix.platform}} with ${{matrix.qtversion}}"
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [ x64, x86 ]
        qtversion: [ Qt5, Qt6 ]

    steps:
    - name: 'Setup NuGet Credentials'
      shell: 'bash'
      run: >
        $(c:/vcpkg/vcpkg fetch nuget | tail -n 1)
        sources add
        -source "https://nuget.pkg.github.com/CelestiaProject/index.json"
        -storepasswordincleartext
        -name "GitHub"
        -username "CelestiaProject"
        -password "${{ secrets.GITHUB_TOKEN }}"

    - name: 'Install dependencies'
      shell: cmd
      run: |
        set QtBasePkg=qtbase
        set QtCompatPkg=qt5compat
        if ${{matrix.qtversion}}==Qt5 (
            set QtBasePkg=qt5-base
            unset QtCompatPkg
        )
        vcpkg --triplet=${{matrix.platform}}-windows install --recurse libpng libjpeg-turbo gettext luajit fmt libepoxy eigen3 freetype cspice ffmpeg[x264] %QtBasePkg% %QtCompatPkg%

    - name: 'Checkout source code'
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: 'Configure CMake'
      shell: cmd
      run: |
        set UseQt6=OFF
        set GeneratorPlatform=${{matrix.platform}}
        if ${{matrix.qtversion}}==Qt6 set UseQt6=ON
        if ${{matrix.platform}}==x86 set GeneratorPlatform=Win32
        cmake -B ${{github.workspace}}/build -DCMAKE_TOOLCHAIN_FILE=c:/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{matrix.platform}}-windows -DCMAKE_GENERATOR_PLATFORM=%GeneratorPlatform% -DENABLE_SPICE=ON -DENABLE_TOOLS=ON -DENABLE_TESTS=ON -DENABLE_SDL=OFF -DENABLE_QT=ON -DUSE_QT6=%UseQt6% -DENABLE_FFMPEG=ON -DENABLE_MINIAUDIO=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -- /maxcpucount:2 /nologo

    - name: 'Copy DLL for tests'
      working-directory: ${{github.workspace}}/build
      run: |
        copy src\celestia\${{env.BUILD_TYPE}}\*.dll test\unit\${{env.BUILD_TYPE}}\
        copy src\celestia\${{env.BUILD_TYPE}}\*.dll test\integration\${{env.BUILD_TYPE}}\

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}

    - name: Run winqtdeploy
      working-directory: ${{github.workspace}}/build/src/celestia
      if: matrix.qtversion == 'Qt5'
      run: |
        c:\vcpkg\ports\qt5-base\qtdeploy.ps1 qt\${{env.BUILD_TYPE}}\

    - name: Run winqtdeploy
      working-directory: ${{github.workspace}}/build/src/celestia
      if: matrix.qtversion == 'Qt6'
      run: |
        C:/vcpkg/installed/${{matrix.platform}}-windows/tools/Qt6/bin/windeployqt.exe qt\${{env.BUILD_TYPE}}\celestia-qt.exe

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: celestia-${{matrix.platform}}-${{matrix.qtversion}}
        path: |
          ${{github.workspace}}/build/src/**/*.exe
          ${{github.workspace}}/build/src/**/*.dll
          ${{github.workspace}}/build/po/**/*.gmo
          ${{github.workspace}}/build/tools/**/*.exe
          ${{github.workspace}}/shaders/*.glsl

  build-posix:
    name: "${{matrix.config.os}} with ${{matrix.qtversion}}"
    strategy:
      fail-fast: false
      matrix:
        config:
        - os: ubuntu-20.04
          avif: OFF     # Not supported on Ubuntu20.04
          gles: ON
          gtk3: ON
          minaudio: ON
          wayland: ON
        - os: ubuntu-22.04
          avif: ON
          gles: ON
          gtk3: ON
          minaudio: ON
          wayland: ON
        - os: macos-latest
          avif: ON
          gles: OFF     # Native macOS applications can't access GLES APIs
          gtk3: OFF     # macOS is not a primary target for GTK frontend
          minaudio: ON
          wayland: OFF  # Wayland is not relevant on macOS
        qtversion: [ Qt5, Qt6 ]
        exclude:
        - config:
            os: ubuntu-20.04
          qtversion: Qt6

    runs-on: ${{matrix.config.os}}
    steps:
    - name: 'Install dependencies'
      if: matrix.config.os != 'macos-latest'
      run: |
        sudo apt update
        sudo apt install -y libeigen3-dev \
                            libepoxy-dev \
                            libavcodec-dev \
                            libavformat-dev \
                            libavutil-dev \
                            libswscale-dev \
                            libjpeg-dev \
                            libpng-dev \
                            libglu1-mesa-dev \
                            libgtk-3-dev \
                            libfreetype6-dev \
                            libsdl2-dev \
                            libluajit-5.1-dev \
                            libfmt-dev \
                            libwayland-dev \
                            wayland-protocols \
                            ninja-build
        if [ "${{matrix.qtversion}}" = "Qt5" ]; then
            sudo apt install -y qtbase5-dev qtbase5-dev-tools qtbase5-private-dev
        else
            sudo apt install -y qt6-base-dev qt6-base-dev-tools libqt6core5compat6-dev qt6-base-private-dev
        fi
        if [ "${{matrix.config.avif}}" = "ON" ]; then
            sudo apt install -y libavif-dev
        fi

    - name: 'Install dependencies'
      if: matrix.config.os == 'macos-latest'
      run: |
        brew install pkg-config \
                     ninja \
                     eigen \
                     ffmpeg \
                     gtk+ \
                     gtkglext \
                     cspice \
                     fmt \
                     jpeg \
                     gettext \
                     libpng \
                     lua \
                     freetype \
                     libepoxy \
                     sdl2 \
                     libavif
        if [ "${{matrix.qtversion}}" = "Qt5" ]; then
            brew install qt5
        else
            brew install qt6
        fi

    - name: 'Checkout source code'
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: 'Configure CMake'
      run: |
        [ "${{matrix.qtversion}}" = "Qt6" ] && UseQt6=ON
        cmake -B ${{github.workspace}}/build            \
              -G Ninja                                  \
              -DENABLE_GLES=${{matrix.config.gles}}     \
              -DENABLE_SPICE=ON                         \
              -DENABLE_TOOLS=OFF                        \
              -DENABLE_TESTS=ON                         \
              -DENABLE_SDL=ON                           \
              -DENABLE_GTK=ON                           \
              -DUSE_GTK3=${{matrix.config.gtk3}}        \
              -DENABLE_QT=ON                            \
              -DUSE_QT6=${UseQt6:OFF}                   \
              -DUSE_WAYLAND=${{matrix.config.wayland}}  \
              -DENABLE_FFMPEG=ON                        \
              -DENABLE_LIBAVIF=${{matrix.config.avif}}  \
              -DENABLE_MINIAUDIO=${{matrix.config.minaudio}}

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: ninja

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest

  gnulinux-arm64:
    runs-on: self-hosted
    steps:
    - name: 'Install dependencies'
      run: |
        #sudo dnf config-manager --set-enabled ol8_codeready_builder
        sudo yum install -y eigen3-devel \
                            libepoxy-devel \
                            libpng-devel \
                            libjpeg-turbo-devel \
                            freetype-devel \
                            SDL2-devel \
                            lua-devel \
                            gtk3-devel \
                            qt5-qtbase-devel \
                            qt5-qttools \
                            gettext-devel \
                            cmake \
                            ninja-build \
                            gcc-toolset-11-gcc-c++

    - name: 'Checkout source code'
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: 'Configure CMake'
      run: |
        cmake -B ${{github.workspace}}/build  \
              -G Ninja                        \
              -DENABLE_GLES=ON                \
              -DENABLE_SPICE=ON               \
              -DENABLE_TOOLS=ON               \
              -DENABLE_TESTS=ON               \
              -DENABLE_SDL=ON                 \
              -DENABLE_GTK=ON                 \
              -DUSE_GTK3=ON                   \
              -DENABLE_QT=ON                  \
              -DENABLE_FFMPEG=OFF             \
              -DENABLE_MINIAUDIO=ON
      env:
        CC: /opt/rh/gcc-toolset-11/root/usr/bin/gcc
        CXX: /opt/rh/gcc-toolset-11/root/usr/bin/g++

    - name: Build
      working-directory: ${{github.workspace}}/build
      run: ninja

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest

  sonarscanner:
    runs-on: sonarscanner
    steps:
    - name: 'Install dependencies'
      run: |
        sudo apt update
        sudo apt install -y libeigen3-dev \
                            libepoxy-dev \
                            libavcodec-dev \
                            libavformat-dev \
                            libavutil-dev \
                            libswscale-dev \
                            libjpeg-dev \
                            libpng-dev \
                            libglu1-mesa-dev \
                            qtbase5-dev \
                            qtbase5-dev-tools \
                            libqt5opengl5-dev \
                            libfreetype6-dev \
                            libsdl2-dev \
                            libluajit-5.1-dev \
                            cmake

    - name: 'Checkout source code'
      uses: actions/checkout@v3
      with:
        submodules: true
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: 'Configure CMake'
      run: |
        cmake -B ${{github.workspace}}/build \
              -G Ninja                       \
              -DENABLE_GLES=ON               \
              -DENABLE_SPICE=OFF             \
              -DENABLE_TOOLS=OFF             \
              -DENABLE_TESTS=OFF             \
              -DENABLE_SDL=ON                \
              -DENABLE_GTK=OFF               \
              -DENABLE_QT=ON                 \
              -DENABLE_FFMPEG=ON             \
              -DENABLE_MINIAUDIO=ON          \
              -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Analyze
      run: |
        sonar-scanner                                                   \
          -Dsonar.cfamily.compile-commands=build/compile_commands.json  \
          -Dsonar.organization=celestiaproject                          \
          -Dsonar.projectKey=CelestiaProject_Celestia                   \
          -Dsonar.sources=src/                                          \
          -Dsonar.exclusions=src/celestia/win32/**,src/celestia/gtk/**,src/celutil/r128.h \
          -Dsonar.test.exclusions=test/**                               \
          -Dsonar.tests=test/
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
